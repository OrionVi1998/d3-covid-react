{"version":3,"sources":["Components/TopHeader.js","Components/D3PieChart.js","Components/PieChartWrapper.js","Components/CountryDataTable.js","Components/KeySelectorHeader.js","Components/D3LineChart.js","Components/LineChartWrapper.js","App.js","reportWebVitals.js","index.js"],"names":["TopHeader","Menu","inverted","style","height","Item","position","Header","as","Subheader","href","Button","color","floated","onClick","window","open","Icon","name","MARGIN","TOP","BOTTOM","RIGHT","LEFT","XDELTA","YDELTA","WIDTH","HEIGHT","D3PieChart","element","data","setCountryData","chartPercentage","this","svg","d3","append","attr","pie","sortValues","value","d","arc","innerRadius","outerRadius","Math","min","update","topTwo","length","filter","arcs","domain","map","range","t","reverse","selectAll","join","enter","on","event","text","round","toLocaleString","exit","remove","radius","centroid","arcLabel","call","endAngle","startAngle","PieChartWrapper","chartKey","chartArea","useRef","useState","chart","setChart","useEffect","formattedData","iso_code","sort","a","b","current","countryData","find","country","className","ref","CountryDataTable","array","page_size","page_number","currentPage","setPage","totalRows","setTotalRows","totalPages","setTotalPages","Object","keys","k","Table","Row","Cell","width","replace","RegExp","toString","row","undefined","Grid","Column","content","location","subheader","definition","size","Body","slice","Pagination","onPageChange","activePage","KeySelectorHeader","setChartKey","setChartPercentage","Segment","select","columns","rows","verticalAlign","textAlign","Label","basic","pointing","Dropdown","placeholder","fluid","selection","options","key","onChange","Input","max","type","D3LineChart","x","date","y","nice","line","defined","isNaN","mainG","xAxisGroup","yAxisGroup","yAxis","g","clone","xAxis","ticks","tickSizeOuter","LineChartWrapper","App","allData","setAllData","latestData","setLatestData","timedData","setTimedData","csv","autoType","then","totalData","Array","from","group","countryTimedData","e","startsWith","catch","err","console","log","utcTimeArray","Group","compact","divided","loading","renderLineViz","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba2d1fb6.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Header, Button, Icon, Menu} from \"semantic-ui-react\";\r\n\r\nfunction TopHeader() {\r\n\r\n    return (\r\n        <Menu inverted style={{height:\"6vh\"}}>\r\n            <Menu.Item position={\"left\"}>\r\n                <Header as={\"h1\"} inverted>\r\n                    Covid D3\r\n                </Header>\r\n            </Menu.Item>\r\n            <Menu.Item>\r\n                <Header.Subheader>\r\n                    A lot of thanks to\r\n                    <a href=\"https://ourworldindata.org/coronavirus-source-data\"> Our World In Data\r\n                    </a> for providing the dataset\r\n                </Header.Subheader>\r\n            </Menu.Item>\r\n            <Menu.Item position=\"right\">\r\n                <Button\r\n                    inverted\r\n                    color={\"grey\"}\r\n                    floated={\"right\"}\r\n                    onClick={() => {window.open(\"https://github.com/OrionVi1998/d3-covid-react\")}}>\r\n                    <Icon name={\"github\"}/> GitHub\r\n                </Button>\r\n            </Menu.Item>\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default TopHeader\r\n","import * as d3 from \"d3\";\r\n\r\nconst MARGIN = {\r\n    TOP: 50,\r\n    BOTTOM: 50,\r\n    RIGHT: 50,\r\n    LEFT: 50\r\n}\r\n\r\nMARGIN.XDELTA = MARGIN.LEFT + MARGIN.RIGHT\r\nMARGIN.YDELTA = MARGIN.TOP + MARGIN.BOTTOM\r\n\r\nconst WIDTH = 500\r\nconst HEIGHT = 500\r\n\r\n\r\nclass D3PieChart {\r\n\r\n    constructor(element, data, setCountryData, chartPercentage) {\r\n\r\n        this.setCountryData = setCountryData\r\n\r\n        this.svg = d3.select(element)\r\n            .append(\"svg\")\r\n            .attr(\"width\", WIDTH)\r\n            .attr(\"height\", HEIGHT)\r\n            .append(\"g\")\r\n            .attr(\"transform\", `translate(${WIDTH / 2}, ${HEIGHT / 2})`)\r\n\r\n        this.pie = d3.pie()\r\n            .sortValues(null)\r\n            .value(d => d.value)\r\n\r\n        this.arc = d3.arc()\r\n            .innerRadius(0)\r\n            .outerRadius(Math.min(WIDTH, HEIGHT) / 2 - 1)\r\n\r\n        this.update(data, chartPercentage)\r\n\r\n    }\r\n\r\n    update(data, chartPercentage) {\r\n        let topTwo = [data[data.length -2], data[data.length - 1]]\r\n\r\n        data = data.filter(d => {\r\n            return (d.value > d3.max(data, d => d.value) * chartPercentage /100)\r\n        })\r\n\r\n        if (data.length === 1) {\r\n            data = topTwo\r\n        }\r\n\r\n        this.arcs = this.pie(data)\r\n\r\n        this.color = d3.scaleOrdinal()\r\n            .domain(data.map(d => d.value))\r\n            .range(d3.quantize(t => d3.interpolateSpectral(t * 0.8 + 0.1), data.length).reverse())\r\n\r\n        this.svg.append(\"g\")\r\n            .attr(\"stroke\", \"white\")\r\n            .selectAll(\"path\")\r\n            .data(this.arcs)\r\n            .join(\r\n                enter => {\r\n                    enter.append(\"path\")\r\n                        .attr(\"fill\", d => this.color(d.value))\r\n                        .on(\"click\", (event, data) => {\r\n                            this.setCountryData(data.data)\r\n                        })\r\n                        .attr(\"d\", this.arc)\r\n                        .append(\"title\")\r\n                        .text(d => {\r\n                            return `${d.data.name}: ${Math.round(d.data.value).toLocaleString()}`\r\n                        })\r\n                },\r\n                update => update,\r\n                exit => exit.remove())\r\n\r\n\r\n        let arcLabel = (d) => {\r\n            const radius = Math.min(WIDTH, HEIGHT) / 2 * 0.8;\r\n            return d3.arc().innerRadius(radius).outerRadius(radius).centroid(d);\r\n        }\r\n\r\n        this.svg.append(\"g\")\r\n            .attr(\"font-family\", \"sans-serif\")\r\n            .attr(\"font-size\", 12)\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .selectAll(\"text\")\r\n            .data(this.arcs)\r\n            .join(enter => {\r\n                    enter.append(\"text\")\r\n                        .attr(\"transform\", d => `translate(${arcLabel(d)})`)\r\n                        .call(text => text.filter(d => (d.endAngle - d.startAngle) > 0.10).append(\"tspan\")\r\n                            .attr(\"y\", \"-0.4em\")\r\n                            .attr(\"font-weight\", \"bold\")\r\n                            .text(d => d.data.name))\r\n                        .call(text => text.filter(d => (d.endAngle - d.startAngle) > 0.25).append(\"tspan\")\r\n                            .attr(\"x\", 0)\r\n                            .attr(\"y\", \"0.7em\")\r\n                            .attr(\"fill-opacity\", 0.7)\r\n                            .text(d => d.data.value.toLocaleString()))\r\n                        .on(\"click\", (event, data) => {\r\n                            this.setCountryData(data.data)\r\n                        })\r\n                },\r\n                update => update,\r\n                exit => exit.remove()\r\n            )\r\n\r\n    }\r\n}\r\n\r\nexport default D3PieChart\r\n","import React, {useRef, useState, useEffect} from 'react';\r\nimport D3PieChart from './D3PieChart'\r\n\r\nconst PieChartWrapper = ({data, setCountryData, chartKey, chartPercentage}) => {\r\n    const chartArea = useRef(null)\r\n    const [chart, setChart] = useState(null)\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        let setSelectedCountry = (countryData) => {\r\n            // console.log(countryData)\r\n            countryData = data.find(country => {\r\n                return country.iso_code === countryData.name\r\n            })\r\n            // console.log(countryData)\r\n            setCountryData(countryData)\r\n        }\r\n\r\n        // console.log(data)\r\n\r\n        let formattedData = data.map(d => {\r\n            return {\r\n                name: d.iso_code,\r\n                value: d[chartKey]\r\n            }\r\n        })\r\n\r\n        formattedData = formattedData.sort((a, b) => {\r\n            return (a.value - b.value)\r\n        })\r\n\r\n\r\n        if (!chart) {\r\n            setChart(new D3PieChart(chartArea.current, formattedData, setSelectedCountry, chartPercentage))\r\n        } else {\r\n            chart.update(formattedData, chartPercentage)\r\n        }\r\n\r\n    }, [chart, data, setCountryData, chartKey, chartPercentage])\r\n\r\n    return (\r\n        <div className=\"pie-chart-area\" ref={chartArea}/>\r\n    )\r\n}\r\n\r\nexport default PieChartWrapper\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {Grid, Header, Pagination, Table} from \"semantic-ui-react\";\r\n\r\nfunction CountryDataTable({countryData}) {\r\n\r\n    const [currentPage, setPage] = useState(1)\r\n    const [totalRows, setTotalRows] = useState([])\r\n    const [totalPages, setTotalPages] = useState(3)\r\n\r\n    function paginate(array, page_size, page_number) {\r\n        // human-readable page numbers usually start with 1, so we reduce 1 in the first argument\r\n        return array.slice((page_number - 1) * page_size, page_number * page_size);\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        switch (countryData) {\r\n            default:\r\n                setPage(1)\r\n                setTotalRows(\r\n                    Object.keys(countryData).map(k => {\r\n                        if (countryData[k] !== null) {\r\n                            return (\r\n                                <Table.Row key={k}>\r\n                                    <Table.Cell style={{width: \"300px\"}}\r\n                                    >{k.replace(new RegExp(\"_\", \"gm\"), \" \")}</Table.Cell>\r\n                                    <Table.Cell>{countryData[k].toString()}</Table.Cell>\r\n                                </Table.Row>)\r\n                        } else {\r\n                            return undefined\r\n                        }\r\n                    }).filter((row) => row !== undefined)\r\n                )\r\n\r\n                setTotalPages(Math.round(totalRows.length / 10))\r\n\r\n                break;\r\n\r\n            case null:\r\n                break;\r\n        }\r\n\r\n    }, [countryData, totalRows.length])\r\n\r\n\r\n    return (\r\n        countryData ?\r\n            (<Grid.Column>\r\n                <Header\r\n                    content={`Country: ${countryData.location}`}\r\n                    subheader={\"Click a section of the pie chart to see more data on the specific country\"}/>\r\n                <Table definition size={\"small\"}>\r\n                    <Table.Body>\r\n                        {\r\n                            paginate(totalRows, 10, currentPage).map((row) => row)\r\n                        }\r\n                    </Table.Body>\r\n                </Table>\r\n                <Pagination\r\n                    onPageChange={(event, data) => {\r\n                        setPage(data.activePage)\r\n                    }}\r\n                    activePage={currentPage} totalPages={totalPages}/>\r\n            </Grid.Column>)\r\n            :\r\n            (<Grid.Column>\r\n                <Header\r\n                    content={`Country Data`}\r\n                    subheader={\"Hover over a section of the pie chart to see more data\"}/>\r\n            </Grid.Column>)\r\n    )\r\n\r\n}\r\n\r\nexport default CountryDataTable\r\n","import React from \"react\"\r\nimport {Dropdown, Grid, Input, Label, Segment} from \"semantic-ui-react\";\r\n\r\n\r\n\r\nfunction KeySelectorHeader({ chartKey, setChartKey, chartPercentage, setChartPercentage }) {\r\n\r\n\r\n    const dropdownChoices = [\r\n        {\r\n            key: \"tCases\",\r\n            text: \"Total Cases\",\r\n            value: \"total_cases\"\r\n        },\r\n        {\r\n            key: 'tCasesMillion',\r\n            text: 'Total Cases Per Million',\r\n            value: 'total_cases_per_million'\r\n        },\r\n        {\r\n            key: \"tDeathsMillion\",\r\n            text: \"Total Deaths Per Million\",\r\n            value: \"total_deaths_per_million\"\r\n        },\r\n        {\r\n            key: \"tDeaths\",\r\n            text: \"Total Deaths\",\r\n            value: \"total_deaths\"\r\n        }\r\n    ]\r\n\r\n    return (\r\n        <Segment select style={{height: \"7vh\"}}>\r\n            <Grid columns={4} rows={1} verticalAlign={\"middle\"}>\r\n                <Grid.Column textAlign={\"right\"}>\r\n                    <Label basic pointing='right'>\r\n                        Select the data you would like to see\r\n                    </Label>\r\n                </Grid.Column>\r\n                <Grid.Column textAlign={\"left\"}>\r\n                    <Dropdown\r\n                        placeholder={`Total Deaths Per Million`}\r\n                        fluid\r\n                        selection\r\n                        options={dropdownChoices}\r\n                        onChange={(event, data) => {\r\n                            setChartKey(data.value)\r\n                        }}\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column textAlign={\"right\"}>\r\n                    <Label basic pointing='right'>\r\n                        Showing the top {chartPercentage}% of {chartKey}\r\n                    </Label>\r\n                </Grid.Column>\r\n                <Grid.Column textAlign={\"left\"}>\r\n                    <Input\r\n                        min={1}\r\n                        max={80}\r\n                        onChange={(event, { value }) => {\r\n                            setChartPercentage(value)\r\n                        }}\r\n                        type='range'\r\n                        value={chartPercentage}\r\n                    />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n\r\n}\r\n\r\nexport default KeySelectorHeader\r\n","import * as d3 from \"d3\";\r\n\r\nconst MARGIN = {\r\n    TOP: 10,\r\n    BOTTOM: 20,\r\n    RIGHT: 10,\r\n    LEFT: 50\r\n}\r\n\r\nMARGIN.XDELTA = MARGIN.LEFT + MARGIN.RIGHT\r\nMARGIN.YDELTA = MARGIN.TOP + MARGIN.BOTTOM\r\n\r\nconst WIDTH = 1280\r\nconst HEIGHT = 225\r\n\r\nclass D3LineChart {\r\n\r\n    constructor(element, data) {\r\n\r\n        this.svg = d3.select(element)\r\n            .append(\"svg\")\r\n            .attr(\"width\", WIDTH)\r\n            .attr(\"height\", HEIGHT)\r\n\r\n        this.x = d3.scaleUtc()\r\n            .domain(d3.extent(data, d => d.date))\r\n            .range([MARGIN.LEFT, WIDTH - MARGIN.RIGHT])\r\n\r\n\r\n        this.y = d3.scaleLinear()\r\n            .domain([0, d3.max(data, d => d.value)]).nice()\r\n            .range([HEIGHT - MARGIN.BOTTOM, MARGIN.TOP])\r\n\r\n\r\n        this.line = d3.line()\r\n            .defined(d => !isNaN(d.value) && d.value !== null)\r\n            .x(d => this.x(d.date))\r\n            .y(d => this.y(d.value))\r\n\r\n        this.mainG = this.svg.append(\"g\")\r\n        this.xAxisGroup = this.svg.append(\"g\")\r\n        this.yAxisGroup = this.svg.append(\"g\")\r\n\r\n        this.update(data)\r\n\r\n    }\r\n\r\n    update(data) {\r\n\r\n        this.x\r\n            .domain(d3.extent(data, d => d.date))\r\n\r\n        this.y\r\n            .domain([0, d3.max(data, d => d.value)]).nice()\r\n\r\n        this.yAxis = g => g\r\n            .attr(\"transform\", `translate(${MARGIN.LEFT},0)`)\r\n            .call(d3.axisLeft(this.y))\r\n            .call(g => g.select(\".domain\").remove())\r\n            .call(g => g.select(\".tick:last-of-type text\").clone()\r\n                .attr(\"x\", 3)\r\n                .attr(\"text-anchor\", \"start\")\r\n                .attr(\"font-weight\", \"bold\")\r\n                .text(data.y))\r\n\r\n        this.xAxis = g => g\r\n            .attr(\"transform\", `translate(0,${HEIGHT - MARGIN.BOTTOM})`)\r\n            .call(d3.axisBottom(this.x).ticks(WIDTH / 80).tickSizeOuter(0))\r\n\r\n        this.xAxisGroup\r\n            .call(this.xAxis);\r\n\r\n        this.yAxisGroup\r\n            .call(this.yAxis);\r\n\r\n\r\n        this.mainG\r\n            .selectAll(\"path\")\r\n            .data([data])\r\n            .join(enter => {\r\n                    return enter.append(\"path\")\r\n                        .attr(\"d\", d => this.line(d))\r\n                },\r\n                update => {\r\n                    return update\r\n                        .attr(\"d\", d => this.line(d))\r\n                },\r\n                exit => {\r\n                    return exit.remove()\r\n                }\r\n            )\r\n            .attr(\"fill\", \"none\")\r\n            .attr(\"stroke\", \"steelblue\")\r\n            .attr(\"stroke-width\", 1.5)\r\n            .attr(\"stroke-linejoin\", \"round\")\r\n            .attr(\"stroke-linecap\", \"round\")\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default D3LineChart\r\n","import React, {useRef, useState, useEffect} from 'react';\r\nimport D3LineChart from \"./D3LineChart\";\r\n\r\n\r\nconst LineChartWrapper = ({ data, chartKey }) => {\r\n    const chartArea = useRef(null)\r\n    const [chart, setChart] = useState(null)\r\n\r\n\r\n    useEffect(() => {\r\n        //\r\n        // console.log(data[0].date.toUTCString())\r\n\r\n        let formattedData = data.map(d => {\r\n            return {\r\n                name: d.iso_code,\r\n                date: d.date,\r\n                value: d[chartKey]\r\n            }\r\n        })\r\n\r\n        if (!chart) {\r\n            setChart(new D3LineChart(chartArea.current, formattedData))\r\n        } else {\r\n            chart.update(formattedData)\r\n        }\r\n\r\n    }, [chart, chartKey, data])\r\n\r\n    return (\r\n        <div className=\"line-chart-area\" ref={chartArea}/>\r\n    )\r\n}\r\n\r\nexport default LineChartWrapper\r\n","import './App.css';\nimport TopHeader from \"./Components/TopHeader\";\nimport {useEffect, useState} from \"react\";\nimport {csv, group, autoType} from \"d3\"\nimport {Grid, Segment, Header} from \"semantic-ui-react\";\nimport PieChartWrapper from \"./Components/PieChartWrapper\";\nimport CountryDataTable from \"./Components/CountryDataTable\";\nimport KeySelectorHeader from \"./Components/KeySelectorHeader\";\nimport LineChartWrapper from \"./Components/LineChartWrapper\";\n\nfunction App() {\n\n    const [allData, setAllData] = useState([])\n    const [latestData, setLatestData] = useState(null)\n    const [countryData, setCountryData] = useState(null)\n    const [chartKey, setChartKey] = useState(\"total_cases_per_million\")\n    const [chartPercentage, setChartPercentage] = useState(45)\n    const [timedData, setTimedData] = useState(null)\n\n    useEffect(() => {\n        csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\", autoType)\n            .then(data => {\n                data = Array.from(group(data, d => d.iso_code), ([key, value]) => ({key, value}))\n\n                let totalData = data.map(d => d.value)\n                totalData = totalData.map(countryTimedData => {\n                    return countryTimedData.sort((a, b) => a.date - b.date)\n                })\n\n                setAllData(totalData)\n\n                data = totalData.map(d => d[d.length-1])\n\n                data = data.filter(e =>\n                    !e.iso_code.startsWith(\"OWID\")\n                )\n\n                setLatestData(data)\n            })\n            .catch(err => console.log(err))\n\n    }, [])\n\n    useEffect(() => {\n        setChartPercentage(45)\n    }, [chartKey])\n\n    useEffect(() => {\n\n        if (allData !== null && countryData !== null) {\n            setTimedData(allData.find(utcTimeArray => utcTimeArray[0].iso_code === countryData.iso_code))\n        }\n        // console.log(timedData)\n\n    }, [allData, countryData, timedData])\n\n\n\n\n    function renderLineViz() {\n\n        if (latestData) {\n            if (!timedData) {\n                return (\n                    <Segment placeholder>\n                        <Header.Subheader>\n                            Select a country to see a date visualization of the selected field\n                        </Header.Subheader>\n                    </Segment>\n                )\n            } else {\n                return (\n                    <Segment>\n                        <LineChartWrapper data={timedData} chartKey={chartKey}/>\n                    </Segment>\n                )\n            }\n        }\n    }\n\n\n    return (\n        <div className=\"App\">\n            <Segment.Group>\n                <TopHeader/>\n                {\n                    latestData ?\n                        <Segment compact style={{height: \"100%\"}}>\n                            <KeySelectorHeader chartKey={chartKey}\n                                               setChartKey={setChartKey}\n                                               chartPercentage={chartPercentage}\n                                               setChartPercentage={setChartPercentage}/>\n                            <Grid columns={2} divided>\n                                <Grid.Column>\n                                    <Segment>\n                                        <PieChartWrapper\n                                            data={latestData}\n                                            setCountryData={setCountryData}\n                                            chartKey={chartKey}\n                                            chartPercentage={chartPercentage}\n                                        />\n                                    </Segment>\n                                </Grid.Column>\n                                <CountryDataTable countryData={countryData}/>\n                            </Grid>\n                        </Segment>\n                        :\n                        <Segment loading style={{height: \"92vh\"}}/>\n                }\n                {renderLineViz()}\n            </Segment.Group>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-less/semantic.less'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}